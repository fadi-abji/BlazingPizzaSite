@page "/checkout"
@using BlazingPizzaSite.Model
@using BlazingPizzaSite.Services
@inject OrderState OrderState
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@rendermode InteractiveServer


<div class="main">
    <div class="checkout-cols">
        <div class="checkout-order-details">
            <h4>Review order</h4>
            @foreach (var pizza in Order.Pizzas)
            {
                <p>
                    <strong>
                        @(pizza.Size)"
                        @pizza.Special.Name
                        (£@pizza.GetFormattedTotalPrice())
                    </strong>
                </p>
            }

            <p>
                <strong>
                    Total price:
                    £@Order.GetFormattedTotalPrice()
                </strong>
            </p>
        </div>
    </div>

    <button class="checkout-button btn btn-warning" @onclick="PlaceOrder" disabled=@isSubmitting>
        Place order
    </button>
</div>

@code {
    Order Order => OrderState.Order;

    bool isSubmitting;

    async Task PlaceOrder()
    {
        try
        {
            isSubmitting = true;
            //respond 400 error
            var uri = NavigationManager.BaseUri + "orders";
            var response = await HttpClient.PostAsJsonAsync(uri, OrderState.Order);

            var responseContent = await response.Content.ReadAsStringAsync();


            // if(response.IsSuccessStatusCode)
            // {
                var newOrderId = await response.Content.ReadFromJsonAsync<int>();
                OrderState.ResetOrder();
                NavigationManager.NavigateTo($"myorders/{newOrderId}");
            // }
            // else
            // {
            //     var errorContent = await response.Content.ReadAsStringAsync();
            //     Console.WriteLine($"Error: {response.StatusCode} - {errorContent}");
            // }
        }
        catch (Exception ex)
        {
            
            throw; 
        }
    }
}