@page "/checkout"
@using BlazingPizzaSite.Model
@using BlazingPizzaSite.Services
@inject OrderState OrderState
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@rendermode InteractiveServer


<div class="main">
    <EditForm Model="Order.DeliveryAddress" OnSubmit="CheckSubmission">


        <div class="checkout-cols">
            <div class="checkout-order-details">
                <h4>Review order</h4>
                <OrderReview Order="Order" />
            </div>

            <div class="checkout-delivery-address">
                <h4>Deliver to...</h4>
                <AddressEditor Address="Order.DeliveryAddress" />
            </div>

        </div>

        <button class="checkout-button btn btn-warning"  disabled=@isSubmitting>
            Place order
        </button>
    </EditForm>

</div>

@code {
    Order Order => OrderState.Order;

    bool isSubmitting;

    async Task PlaceOrder()
    {
        try
        {
            //respond 400 error
            var uri = NavigationManager.BaseUri + "orders";
            var response = await HttpClient.PostAsJsonAsync(uri, OrderState.Order);

            var responseContent = await response.Content.ReadAsStringAsync();


            // if(response.IsSuccessStatusCode)
            // {
            var newOrderId = await response.Content.ReadFromJsonAsync<int>();
            OrderState.ResetOrder();
            NavigationManager.NavigateTo($"myorders/{newOrderId}");
            // }
            // else
            // {
            //     var errorContent = await response.Content.ReadAsStringAsync();
            //     Console.WriteLine($"Error: {response.StatusCode} - {errorContent}");
            // }
        }
        catch (Exception ex)
        {

            throw;
        }
    }

    private async Task CheckSubmission()
    {
        isSubmitting = true;
        await PlaceOrder();
        isSubmitting = false;
    }
}